// Generated by BUCKLESCRIPT VERSION 4.0.6, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var ReasonReact = require("reason-react/src/ReasonReact.js");

var component = ReasonReact.statelessComponent("Page");

function handleClick(_, _$1) {
  console.log("clicked!");
  return /* () */0;
}

function make($staropt$star, _) {
  var message = $staropt$star !== undefined ? $staropt$star : "default message";
  return /* record */[
          /* debugName */component[/* debugName */0],
          /* reactClassInternal */component[/* reactClassInternal */1],
          /* handedOffState */component[/* handedOffState */2],
          /* willReceiveProps */component[/* willReceiveProps */3],
          /* didMount */component[/* didMount */4],
          /* didUpdate */component[/* didUpdate */5],
          /* willUnmount */component[/* willUnmount */6],
          /* willUpdate */component[/* willUpdate */7],
          /* shouldUpdate */component[/* shouldUpdate */8],
          /* render */(function (self) {
              return React.createElement("div", {
                          onClick: Curry._1(self[/* handle */0], handleClick)
                        }, message);
            }),
          /* initialState */component[/* initialState */10],
          /* retainedProps */component[/* retainedProps */11],
          /* reducer */component[/* reducer */12],
          /* jsElementWrapped */component[/* jsElementWrapped */13]
        ];
}

function plus(x, _) {
  return x + 1 | 0;
}

function concat(x, y) {
  if (y !== undefined) {
    return x + y;
  }
  
}

function consumeVariant(x) {
  if (typeof x === "number") {
    return 1;
  } else if (x.tag) {
    var n = x[0];
    return (
            n !== undefined ? n : 0
          ) + 3 | 0;
  } else {
    return (x[0] + x[1] | 0) + 2 | 0;
  }
}

var l = /* :: */[
  1,
  /* :: */[
    2,
    /* :: */[
      3,
      /* [] */0
    ]
  ]
];

var map = List.map;

exports.component = component;
exports.handleClick = handleClick;
exports.make = make;
exports.plus = plus;
exports.concat = concat;
exports.consumeVariant = consumeVariant;
exports.l = l;
exports.map = map;
/* component Not a pure module */
